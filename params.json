{
  "name": "CUDA Accelerated Computational Fluid Simulation",
  "tagline": "Abhishek Yadav & Preetam Amancharla - 15-418 Project",
  "body": "### Summary\r\nWe are going to implement a parallel version of high resolution dynamic fluid simulation algorithms based on the Navier-Stokes equations which describes the motion of viscous fluids. We'll use the CUDA enabled NVIDA GTX 780 GPU in order to exploit the large amount of parallelism in graphics hardware. Another goal of this project is to compare performance against a 2.2 GHz intel core i7 processor.\r\n\r\n### Background\r\n\r\n### The Challenge\r\n* The primary challenge of our project is to deal with the dependencies between the different steps in the sequential algorithm. The sequential algorithm first applies advection forces, followed by diffusion, external forces and then subtracts the pressure gradient to obtain a final result for that step. Finding a way to eliminate dependencies between these steps to maximize performance and maintain correctness is going to be one of the main focuses of our algorithm.\r\n* A limitation of the numerical steps of the Navier-Stokes algorithm is that most of them cannot be done in place. This requires us to store temporary values. This would require us to store temporary values at each step for each pixel and then accessing each of these values for the next step. Figuring out a way to manage the lack of in-place algorithms/coming up with in-place algorithms will have a major impact on memory access latencies and cache locality of our algorithm.\r\n* In terms of workload, instruction stream divergence at the boundaries of the fluid or different parts of the fluid at different velocities will affect the efficiency of our code through work imbalance between SIMD execution units. Since we'll be working over tens of thousands of pixels, utilizing the full capability of the GPU should not be an issue.\r\n\r\n### Resources\r\n\r\n### Goals & Deliverables\r\n\r\n### Platform Choice\r\nWe will be implementing the simulator in C++ using the CUDA platform to work with the NVIDIA GTX 780 GPU. The ghc41 lab machine contains this GPU. For the CPU implementation, we will use the quad-core 2.2 GHz Intel Core i7 processors which are contained in ghc[47 -84]. The OpenMP API would be used to support parallelism on the CPU. \r\nThese systems are a good choice for our fluid simulator since the GPU is the fastest one available and is well suited to a compute-intensive project due to high scope for parallelism. The i7 processor would be a good benchmark to analyze CPU performance and compare it with the GPU's performance.\r\n\r\n### Schedule\r\nDate | Goals\r\n------------ | -------------\r\n**April 10, Sunday**  | Complete a sequential implementation of the Navier Stokes equation that works on small grid dimensions.\r\n**April 15, Friday**  | Setup a graphical representation of our implementation to visually see the fluid simulation.\r\n**April 22, Friday**  | Parallelize the sequential implementation for the NVIDIA GTX 780 GPU.\r\n**April 29, Friday**  | Optimize the parallel implementation to achieve a higher speedup. Parallelize for the i7 processor and compare results with the GPU.\r\n**May 06, Friday**  | Explore further possibilities and additions to the project and improve the graphical interface.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}